name: Frontend Build  # Workflow 名称，显示在 GitHub Actions 列表中

on:
  push:
    branches:
      - main          # 当推送到 main 分支时触发 Workflow

jobs:
  build:
    runs-on: ubuntu-latest  # 指定运行环境（Ubuntu 最新版本）

    steps:
      # 1. 拉取代码
      - name: Checkout repository
        uses: actions/checkout@v4  # 将当前仓库代码签出到 runner 环境

      # 2. 打印 Node 和 NPM 版本（调试用）
      - name: Debug Node & NPM
        run: |
          node -v                 # 输出 Node.js 版本
          npm -v                  # 输出 npm 版本

      # 3. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18       # 使用 Node.js 18 版本

      # 4. 缓存 node_modules，基于 package-lock.json 变化自动失效
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-

      # 5. 安装依赖（优先用 npm ci，保证锁文件一致）
      #    然后强制安装 @vue/cli-service 避免缺失
      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm install @vue/cli-service@~4.5.0 --save-dev

      # 6. 检查 vue-cli-service 是否存在且可执行
      - name: Debug vue-cli-service
        run: |
          if ! [ -x "./node_modules/.bin/vue-cli-service" ]; then
            echo "❌ vue-cli-service 缺失，构建失败"
            exit 1
          fi
          echo "✅ vue-cli-service 检查通过"

      # 7. 执行构建
      - name: Build project
        run: npm run build

      # 8. 上传构建产物（dist 文件夹）
      - name: Upload production-ready build files
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
